** Creating table:
 create table accounts(id integer primary key, owner varchar, balance integer);
** Inserting rows:
 insert into accounts values(1, 'alice', 100), (2, 'bob', 100), (3, 'claire', 100);
** Setting isolation levels:
 SERIALIZABLE

TRANSACTION 1
=============
select * from accounts
(1, 'alice', 100)
(2, 'bob', 100)
(3, 'claire', 100)

TRANSACTION 1
=============
insert into accounts select 5, 'trans1', sum(balance) from accounts returning *
(5, 'trans1', 300)

TRANSACTION 1
=============
select * from accounts
(1, 'alice', 100)
(2, 'bob', 100)
(3, 'claire', 100)
(5, 'trans1', 300)

TRANSACTION 2
=============
select * from accounts
(1, 'alice', 100)
(2, 'bob', 100)
(3, 'claire', 100)

TRANSACTION 2
=============
insert into accounts select 6, 'trans2', sum(balance) from accounts returning *
(6, 'trans2', 300)

TRANSACTION 2
=============
select * from accounts
(1, 'alice', 100)
(2, 'bob', 100)
(3, 'claire', 100)
(6, 'trans2', 300)

TRANSACTION 1
=============
ATTEMPT COMMIT: 
COMMIT SUCCEEDED

TRANSACTION 2
=============
ATTEMPT COMMIT: 
could not serialize access due to read/write dependencies among transactions
DETAIL:  Reason code: Canceled on identification as a pivot, during commit attempt.
HINT:  The transaction might succeed if retried.


TRANSACTION 3
=============
select * from accounts
(1, 'alice', 100)
(2, 'bob', 100)
(3, 'claire', 100)
(5, 'trans1', 300)
